var h=require("fs"),a=require("path"),i=class{options={config:"",assets:"",importWay:"link"};CSS_ASSET_NAME="atomic.css";cssContent="";constructor(t){for(let s in t)t[s]&&(this.options[s]=t[s]);this.cssContent=this.parseCSS(this.getConfig())}getConfig(){if(this.options.config){if(!h.existsSync(this.options.config))throw new Error("config path is not valid, please check.");return require(this.options.config)}return require(a.resolve(__dirname,"./default.config.js"))}getAssetsPath(t=""){return`${this.options.assets}${t}${this.CSS_ASSET_NAME}`}apply(t){let s=i.name;t.hooks.make.tap(s,e=>{e.emitAsset(this.getAssetsPath("/"),this.genSource(this.cssContent)),this.writeStaticCSSToLocal()}),t.hooks.shouldEmit.tap(s,e=>(e.finish(()=>{Object.keys(e.assets).filter(n=>n.endsWith(".html")).forEach(n=>this.insertStyleTag(e,n))}),!0))}getMiddlePart(){switch(this.options.importWay){case"link":return`<link type="text/css" rel="stylesheet" href="${this.getAssetsPath()}">`;case"inline":return`<style type="text/css">${this.cssContent}</style>`;default:return`<link type="text/css" rel="stylesheet" href="${this.getAssetsPath()}">`}}insertStyleTag(t,s){let e=t.assets[s].source(),[n,r]=e.split("</head>"),o=`${n}${this.getMiddlePart()}</head>${r}`;t.updateAsset(s,this.genSource(o))}genSource(t){return{source:()=>t,size:()=>t.length}}parseCSS(t){let s="";for(let e in t){let n=t[e];for(let r in n){let o=n[r];for(let c in o){let l=o[c];s+=`.${e.startsWith("$")?"":e}${c}{${r}:${l}}`}}}return s}writeStaticCSSToLocal(){h.writeFileSync(a.resolve(__dirname,"./.atomic.css"),this.cssContent)}};module.exports=i;exports.default=i;
