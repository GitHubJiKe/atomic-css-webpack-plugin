var C=(c,s)=>()=>(s||c((s={exports:{}}).exports,s),s.exports);var d=C((v,w)=>{function f(c){let s="";for(let t in c){let n=c[t];for(let e in n){let i=[e];e.includes("$")&&(i=e.split("$"));let o=n[e];for(let r in o){let h=o[r],p=r,u=!1;r.endsWith("!")&&(u=!0,p=r.split("!")[0]);let S=i.map(A=>`${A}:${h}${u?" !important":""}`).join(";");s+=`.${t.startsWith("$")?"":t}${p}{${S}}`}}}return s}function l(c){let s="";for(let t in c){let n=c[t],{css:e,actions:i}=n;if(e){let o=g(e);s+=`.${t}{${o}}`}if(i)for(let o in i){let r=i[o];s+=`.${t}:${o}{${g(r)}}`}}return s}function g(c){return c?Object.entries(c).map(([s,t])=>`${s}:${t}`).join(";"):""}w.exports={parse:function(c){let{atomic:s,utils:t}=c,n="";return s&&(n+=f(s)),t&&(n+=l(t)),n},parseAtomic:f,parseUtils:l}});var $=require("fs"),y=require("path"),m=d(),{PurgeCSS:E}=require("purgecss"),a=class{options={version:4,config:"",assets:"",publicPath:"/",importWay:"inline",parser:null};CSS_ASSET_NAME="atomic";cssContent="";constructor(s){for(let t in s)s[t]&&(this.options[t]=s[t]);if(this.options.parser)if(typeof this.options.parser=="function")this.cssContent=this.options.parser(this.getConfig());else throw new Error("Customizer parser should be function,which params is config");else this.cssContent=m.parse(this.getConfig())}getConfig(){if(!this.options.config)throw new Error("config path is required, please check.");if(this.options.config){if(!$.existsSync(this.options.config))throw new Error("config path is not valid, please check.");return require(this.options.config)}}getAssetsPath(s,t=!1){let{assets:n,publicPath:e}=this.options,i=t?`${e}${n}`:n;return s?`${i}/${this.CSS_ASSET_NAME}.${s}.css`:`${i}/${this.CSS_ASSET_NAME}.css`}apply(s){let t=s.options.mode==="production",n=a.name;if(!this.options.version)throw new Error("Please make sure you specify the version field.");if(this.options.version=="5"){let{Compilation:e,sources:i}=s.webpack;s.hooks.thisCompilation.tap(n,o=>{o.hooks.processAssets.tap({name:n,stage:e.PROCESS_ASSETS_STAGE_SUMMARIZE},async r=>{t&&await this.purge(r),this.emitAsset(o,i),this.updateAssets(r,o,i),this.writeFile()})})}else if(this.options.version=="4")s.hooks.watchRun.tap(n,e=>{e.hooks.emit.tapAsync(n,async(i,o)=>{let r=i.assets;t&&await this.purge(r),this.emitAsset(i),this.updateAssets(r,i),this.writeFile(),o()})}),s.hooks.emit.tapAsync(n,async(e,i)=>{let o=e.assets;t&&await this.purge(o),this.emitAsset(e),this.updateAssets(o,e),this.writeFile(),i()});else throw new Error(`Doesn't support webpack version ${this.options.version}.`)}emitAsset(s,t){this.options.importWay==="link"&&s.emitAsset(this.getAssetsPath(s.hash),this.getSource(this.cssContent,t))}updateAssets(s,t,n){Object.keys(s).filter(e=>e.endsWith(".html")).forEach(e=>{let i=s[e].source(),[o,r]=i.split("</head>"),h=`${o}${this.getMiddlePart(t.hash)}</head>${r}`;t.updateAsset(e,this.getSource(h,n))})}writeFile(){$.writeFileSync(y.resolve(__dirname,".atomic.css"),this.cssContent)}getSource(s,t){if(this.options.version=="4")return{source:()=>s,size:()=>s.length};if(this.options.version=="5")return new t.RawSource(s)}getMiddlePart(s){let t=`<link type="text/css" rel="stylesheet" href="${this.getAssetsPath(s,!0)}">`;switch(this.options.importWay){case"link":return t;case"inline":return`<style type="text/css">${this.cssContent}</style>`;default:return t}}async purge(s){let t=Object.keys(s).filter(e=>e.endsWith(".js")||e.endsWith(".html")).map(e=>{let i=e.split(".").pop();return{raw:s[e].source(),extension:i}}),n=await new E().purge({content:t,css:[{raw:this.cssContent}]});this.cssContent=n.map(e=>e.css).join(""),console.log(this.cssContent)}};module.exports=a;exports.default=a;
