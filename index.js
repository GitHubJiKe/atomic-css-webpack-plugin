var y=(i,t)=>()=>(t||i((t={exports:{}}).exports,t),t.exports);var S=y((k,d)=>{function l(i){let t="";for(let s in i){let e=i[s];for(let r in e){let n=[r];r.includes("$")&&(n=r.split("$"));let o=e[r];for(let c in o){let h=o[c],a=n.map(p=>`${p}:${h}`).join(";");t+=`.${s.startsWith("$")?"":s}${c}{${a}}`}}}return t}function $(i){let t="";for(let s in i){let e=i[s],{css:r,actions:n}=e;if(r){let o=g(r);t+=`.${s}{${o}}`}if(n)for(let o in n){let c=n[o];t+=`.${s}:${o}{${g(c)}}`}}return t}function g(i){return i?Object.entries(i).map(([t,s])=>`${t}:${s}`).join(";"):""}d.exports={parse:function(i){let{atomic:t,utils:s}=i,e="";return t&&(e+=l(t)),s&&(e+=$(s)),e},parseAtomic:l,parseUtils:$}});var u=require("fs"),C=require("path"),A=S(),f=class{options={version:5,config:"",assets:"",importWay:"link",parser:null};CSS_ASSET_NAME="atomic";cssContent="";constructor(t){for(let s in t)t[s]&&(this.options[s]=t[s]);if(this.options.parser)if(typeof this.options.parser=="function")this.cssContent=this.options.parser(this.getConfig());else throw new Error("Customizer parser should be function,which params is config");else this.cssContent=A.parse(this.getConfig())}getConfig(){if(!this.options.config)throw new Error("config path is required, please check.");if(this.options.config){if(!u.existsSync(this.options.config))throw new Error("config path is not valid, please check.");return require(this.options.config)}}getAssetsPath(t){let s=this.options.assets;return t?`${s}/${this.CSS_ASSET_NAME}.${t}.css`:`${s}/${this.CSS_ASSET_NAME}.css`}apply(t){let s=f.name;if(!this.options.version)throw new Error("Please make sure you specify the version field.");if(this.options.version=="5"){let{Compilation:e,sources:r}=t.webpack;t.hooks.thisCompilation.tap(s,n=>{n.hooks.processAssets.tap({name:s,stage:e.PROCESS_ASSETS_STAGE_SUMMARIZE},o=>{this.options.importWay==="link"&&n.emitAsset(this.getAssetsPath(n.hash),new r.RawSource(this.cssContent)),Object.keys(o).filter(c=>c.endsWith(".html")).forEach(c=>{let h=o[c].source(),[a,p]=h.split("</head>"),w=`${a}${this.getMiddlePart(n.hash)}</head>${p}`;n.updateAsset(c,new r.RawSource(w))}),u.writeFileSync(C.resolve(__dirname,"./.atomic.css"),this.cssContent)})})}else if(this.options.version=="4")t.hooks.emit.tapAsync(s,(e,r)=>{let n=e.assets;this.options.importWay==="link"&&e.emitAsset(this.getAssetsPath(e.hash),this.getSource(this.cssContent)),Object.keys(n).filter(o=>o.endsWith(".html")).forEach(o=>{let c=n[o].source(),[h,a]=c.split("</head>"),p=`${h}${this.getMiddlePart(e.hash)}</head>${a}`;e.updateAsset(o,this.getSource(p))}),u.writeFileSync(C.resolve(__dirname,".atomic.css"),this.cssContent),r()});else throw new Error(`Doesn't support webpack version ${this.options.version}.`)}getSource(t){return{source:()=>t,size:()=>t.lenght}}getMiddlePart(t){let s=`<link type="text/css" rel="stylesheet" href="${this.getAssetsPath(t)}">`;switch(this.options.importWay){case"link":return s;case"inline":return`<style type="text/css">${this.cssContent}</style>`;default:return s}}};module.exports=f;exports.default=f;
