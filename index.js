var h=require("fs"),l=require("path"),c=class{options={config:"",assets:"",importWay:"link"};CSS_ASSET_NAME="atomic.css";cssContent="";constructor(t){for(let s in t)t[s]&&(this.options[s]=t[s]);this.cssContent=this.parseCSS(this.getConfig())}getConfig(){if(this.options.config){if(!h.existsSync(this.options.config))throw new Error("config path is not valid, please check.");return require(this.options.config)}return require(l.resolve(__dirname,"./default.config.js"))}getAssetsPath(t=""){return`${this.options.assets}${t}${this.CSS_ASSET_NAME}`}apply(t){let s=c.name,{Compilation:o,sources:i}=t.webpack;t.hooks.thisCompilation.tap(s,n=>{n.hooks.processAssets.tap({name:s,stage:o.PROCESS_ASSETS_STAGE_SUMMARIZE},r=>{n.emitAsset(this.getAssetsPath("/"),new i.RawSource(this.cssContent)),Object.keys(r).filter(e=>e.endsWith(".html")).forEach(e=>{let a=r[e].source(),[p,f]=a.split("</head>"),u=`${p}${this.getMiddlePart()}</head>${f}`;n.updateAsset(e,new i.RawSource(u))}),h.writeFileSync(l.resolve(__dirname,"./.atomic.css"),this.cssContent)})})}getMiddlePart(){switch(this.options.importWay){case"link":return`<link type="text/css" rel="stylesheet" href="${this.getAssetsPath()}">`;case"inline":return`<style type="text/css">${this.cssContent}</style>`;default:return`<link type="text/css" rel="stylesheet" href="${this.getAssetsPath()}">`}}parseCSS(t){let s="";for(let o in t){let i=t[o];for(let n in i){let r=i[n];for(let e in r){let a=r[e];s+=`.${o.startsWith("$")?"":o}${e}{${n}:${a}}`}}}return s}};module.exports=c;exports.default=c;
