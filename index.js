var y=(e,t)=>()=>(t||e((t={exports:{}}).exports,t),t.exports);var u=y((k,f)=>{f.exports=function(e){let{atomic:t,utils:s}=e,o="";return t&&(o+=A(t)),s&&(o+=C(s)),o};function A(e){let t="";for(let s in e){let o=e[s];for(let r in o){let n=o[r];for(let i in n){let c=n[i];t+=`.${s.startsWith("$")?"":s}${i}{${r}:${c}}`}}}return t}function C(e){let t="";for(let s in e){let o=e[s],{css:r,actions:n}=o;if(r){let i=h(r);t+=`.${s}{${i}}`}if(n)for(let i in n){let c=n[i];t+=`.${s}:${i}{${h(c)}}`}}return t}function h(e){return e?Object.entries(e).map(([t,s])=>`${t}:${s}`).join(";"):""}});var l=require("fs"),p=require("path"),E=u(),a=class{options={config:"",assets:"",importWay:"link"};CSS_ASSET_NAME="atomic.css";cssContent="";constructor(t){for(let s in t)t[s]&&(this.options[s]=t[s]);this.cssContent=E(this.getConfig())}getConfig(){if(this.options.config){if(!l.existsSync(this.options.config))throw new Error("config path is not valid, please check.");return require(this.options.config)}return require(p.resolve(__dirname,"./default.config.js"))}getAssetsPath(t){let s=this.options.assets;return t?`${s}/${this.CSS_ASSET_NAME}.${t}.css`:`${s}/${this.CSS_ASSET_NAME}.css`}apply(t){let s=a.name,{Compilation:o,sources:r}=t.webpack;t.hooks.thisCompilation.tap(s,n=>{n.hooks.processAssets.tap({name:s,stage:o.PROCESS_ASSETS_STAGE_SUMMARIZE},i=>{this.options.importWay==="link"&&n.emitAsset(this.getAssetsPath(n.hash),new r.RawSource(this.cssContent)),Object.keys(i).filter(c=>c.endsWith(".html")).forEach(c=>{let S=i[c].source(),[$,g]=S.split("</head>"),d=`${$}${this.getMiddlePart(n.hash)}</head>${g}`;n.updateAsset(c,new r.RawSource(d))}),l.writeFileSync(p.resolve(__dirname,"./.atomic.css"),this.cssContent)})})}getMiddlePart(t){let s=`<link type="text/css" rel="stylesheet" href="${this.getAssetsPath(t)}">`;switch(this.options.importWay){case"link":return s;case"inline":return`<style type="text/css">${this.cssContent}</style>`;default:return s}}};module.exports=a;exports.default=a;
