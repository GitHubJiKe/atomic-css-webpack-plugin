var y=(r,t)=>()=>(t||r((t={exports:{}}).exports,t),t.exports);var d=y((m,S)=>{function l(r){let t="";for(let s in r){let e=r[s];for(let i in e){let o=[i];i.includes("$")&&(o=i.split("$"));let n=e[i];for(let c in n){let h=n[c],a=o.map(p=>`${p}:${h}`).join(";");t+=`.${s.startsWith("$")?"":s}${c}{${a}}`}}}return t}function g(r){let t="";for(let s in r){let e=r[s],{css:i,actions:o}=e;if(i){let n=$(i);t+=`.${s}{${n}}`}if(o)for(let n in o){let c=o[n];t+=`.${s}:${n}{${$(c)}}`}}return t}function $(r){return r?Object.entries(r).map(([t,s])=>`${t}:${s}`).join(";"):""}S.exports={parse:function(r){let{atomic:t,utils:s}=r,e="";return t&&(e+=l(t)),s&&(e+=g(s)),e},parseAtomic:l,parseUtils:g}});var u=require("fs"),C=require("path"),w=d(),f=class{options={version:5,config:"",assets:"",importWay:"link",parser:null};CSS_ASSET_NAME="atomic";cssContent="";constructor(t){for(let s in t)t[s]&&(this.options[s]=t[s]);if(this.options.parser)if(typeof this.options.parser=="function")this.cssContent=this.options.parser(this.getConfig());else throw new Error("Customizer parser should be function,which params is config");else this.cssContent=w.parse(this.getConfig())}getConfig(){if(!this.options.config)throw new Error("config path is required, please check.");if(this.options.config){if(!u.existsSync(this.options.config))throw new Error("config path is not valid, please check.");return require(this.options.config)}}getAssetsPath(t){let s=this.options.assets;return t?`${s}/${this.CSS_ASSET_NAME}.${t}.css`:`${s}/${this.CSS_ASSET_NAME}.css`}apply(t){let s=f.name;if(this.options.version=="5"){let{Compilation:e,sources:i}=t.webpack;t.hooks.thisCompilation.tap(s,o=>{o.hooks.processAssets.tap({name:s,stage:e.PROCESS_ASSETS_STAGE_SUMMARIZE},n=>{this.options.importWay==="link"&&o.emitAsset(this.getAssetsPath(o.hash),new i.RawSource(this.cssContent)),Object.keys(n).filter(c=>c.endsWith(".html")).forEach(c=>{let h=n[c].source(),[a,p]=h.split("</head>"),A=`${a}${this.getMiddlePart(o.hash)}</head>${p}`;o.updateAsset(c,new i.RawSource(A))}),u.writeFileSync(C.resolve(__dirname,"./.atomic.css"),this.cssContent)})})}else this.options.version=="4"&&t.hooks.compilation.tap(s,e=>{e.hooks.optimizeChunkAssets.tapAsync(s,(i,o)=>{this.options.importWay==="link"&&e.emitAsset(this.getAssetsPath(e.hash),this.getSource(this.cssContent)),Object.keys(i).filter(n=>n.endsWith(".html")).forEach(n=>{let c=i[n].source(),[h,a]=c.split("</head>"),p=`${h}${this.getMiddlePart(e.hash)}</head>${a}`;e.updateAsset(n,this.getSource(p))}),u.writeFileSync(C.resolve(__dirname,"./.atomic.css"),this.cssContent),o()})})}getSource(t){return{source:()=>t,size:()=>t.lenght}}getMiddlePart(t){let s=`<link type="text/css" rel="stylesheet" href="${this.getAssetsPath(t)}">`;switch(this.options.importWay){case"link":return s;case"inline":return`<style type="text/css">${this.cssContent}</style>`;default:return s}}};module.exports=f;exports.default=f;
