var a=require("fs"),h=require("path"),c=class{options={config:"",assets:"",importWay:"link"};CSS_ASSET_NAME="atomic.css";cssContent="";constructor(t){for(let s in t)t[s]&&(this.options[s]=t[s]);this.cssContent=this.parseCSS(this.getConfig())}getConfig(){if(this.options.config){if(!a.existsSync(this.options.config))throw new Error("config path is not valid, please check.");return require(this.options.config)}return require(h.resolve(__dirname,"./default.config.js"))}getAssetsPath(t=""){return`${this.options.assets}${t}${this.CSS_ASSET_NAME}`}apply(t){let s=c.name,{Compilation:n,sources:i}=t.webpack;t.hooks.thisCompilation.tap(s,e=>{e.hooks.processAssets.tap({name:s,stage:n.PROCESS_ASSETS_STAGE_SUMMARIZE},o=>{e.emitAsset(this.getAssetsPath("/"),new i.RawSource(this.cssContent)),Object.keys(o).filter(r=>r.endsWith(".html")).forEach(r=>this.insertStyleTag(e,r)),this.writeStaticCSSToLocal()})})}getMiddlePart(){switch(this.options.importWay){case"link":return`<link type="text/css" rel="stylesheet" href="${this.getAssetsPath()}">`;case"inline":return`<style type="text/css">${this.cssContent}</style>`;default:return`<link type="text/css" rel="stylesheet" href="${this.getAssetsPath()}">`}}insertStyleTag(t,s){let n=t.assets[s].source(),[i,e]=n.split("</head>"),o=`${i}${this.getMiddlePart()}</head>${e}`;t.updateAsset(s,this.genSource(o))}parseCSS(t){let s="";for(let n in t){let i=t[n];for(let e in i){let o=i[e];for(let r in o){let l=o[r];s+=`.${n.startsWith("$")?"":n}${r}{${e}:${l}}`}}}return s}writeStaticCSSToLocal(){a.writeFileSync(h.resolve(__dirname,"./.atomic.css"),this.cssContent)}};module.exports=c;exports.default=c;
