var C=(r,s)=>()=>(s||r((s={exports:{}}).exports,s),s.exports);var w=C((v,$)=>{function f(r){let s="";for(let t in r){let i=r[t];for(let e in i){let n=[e];e.includes("$")&&(n=e.split("$"));let o=i[e];for(let c in o){let a=o[c],p=c,u=!1;c.endsWith("!")&&(u=!0,p=c.split("!")[0]);let A=n.map(d=>`${d}:${a}${u?" !important":""}`).join(";");s+=`.${t.startsWith("$")?"":t}${p}{${A}}`}}}return s}function l(r){let s="";for(let t in r){let i=r[t],{css:e,actions:n}=i;if(e){let o=g(e);s+=`.${t}{${o}}`}if(n)for(let o in n){let c=n[o];s+=`.${t}:${o}{${g(c)}}`}}return s}function g(r){return r?Object.entries(r).map(([s,t])=>`${s}:${t}`).join(";"):""}$.exports={parse:function(r){let{atomic:s,utils:t}=r,i="";return s&&(i+=f(s)),t&&(i+=l(t)),i},parseAtomic:f,parseUtils:l}});var S=require("fs"),y=require("path"),m=w(),{PurgeCSS:E}=require("purgecss"),h=class{options={version:4,config:"",assets:"",publicPath:"/",importWay:"inline",parser:null};CSS_ASSET_NAME="atomic";cssContent="";constructor(s){for(let t in s)s[t]&&(this.options[t]=s[t]);if(this.options.parser)if(typeof this.options.parser=="function")this.cssContent=this.options.parser(this.getConfig());else throw new Error("Customizer parser should be function,which params is config");else this.cssContent=m.parse(this.getConfig())}getConfig(){if(!this.options.config)throw new Error("config path is required, please check.");if(this.options.config){if(!S.existsSync(this.options.config))throw new Error("config path is not valid, please check.");return require(this.options.config)}}getAssetsPath(s,t=!1){let{assets:i,publicPath:e}=this.options,n=t?`${e}${i}`:i;return s?`${n}/${this.CSS_ASSET_NAME}.${s}.css`:`${n}/${this.CSS_ASSET_NAME}.css`}apply(s){let t=h.name;if(!this.options.version)throw new Error("Please make sure you specify the version field.");if(this.options.version=="5"){let{Compilation:i,sources:e}=s.webpack;s.hooks.thisCompilation.tap(t,n=>{n.hooks.processAssets.tap({name:t,stage:i.PROCESS_ASSETS_STAGE_SUMMARIZE},async o=>{await this.purge(o),this.emitAsset(n,e),this.updateAssets(o,n,e),this.writeFile()})})}else if(this.options.version=="4")s.hooks.watchRun.tap(t,i=>{i.hooks.emit.tapAsync(t,(e,n)=>{console.log("run");let o=e.assets;this.purge(o).then(()=>{this.emitAsset(e),this.updateAssets(o,e),this.writeFile(),n()})})}),s.hooks.emit.tapAsync(t,(i,e)=>{let n=i.assets;this.purge(n).then(()=>{this.emitAsset(i),this.updateAssets(n,i),this.writeFile(),e()})});else throw new Error(`Doesn't support webpack version ${this.options.version}.`)}emitAsset(s,t){this.options.importWay==="link"&&s.emitAsset(this.getAssetsPath(s.hash),this.getSource(this.cssContent,t))}updateAssets(s,t,i){Object.keys(s).filter(e=>e.endsWith(".html")).forEach(e=>{let n=s[e].source(),[o,c]=n.split("</head>"),a=`${o}${this.getMiddlePart(t.hash)}</head>${c}`;t.updateAsset(e,this.getSource(a,i))})}writeFile(){S.writeFileSync(y.resolve(__dirname,".atomic.css"),this.cssContent)}getSource(s,t){if(this.options.version=="4")return{source:()=>s,size:()=>s.length};if(this.options.version=="5")return new t.RawSource(s)}getMiddlePart(s){let t=`<link type="text/css" rel="stylesheet" href="${this.getAssetsPath(s,!0)}">`;switch(this.options.importWay){case"link":return t;case"inline":return`<style type="text/css">${this.cssContent}</style>`;default:return t}}async purge(s){let t=Object.keys(s).filter(e=>e.endsWith(".js")||e.endsWith(".html")).map(e=>{let n=e.split(".").pop();return{raw:s[e].source(),extension:n}}),i=await new E().purge({content:t,css:[{raw:this.cssContent}]});this.cssContent=i.map(e=>e.css).join("")}};module.exports=h;exports.default=h;
